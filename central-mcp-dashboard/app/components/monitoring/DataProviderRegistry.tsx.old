'use client';

import { useState, useEffect } from 'react';

interface DataProvider {
  id: string;
  name: string;
  category: 'monitoring' | 'metrics' | 'system' | 'visualization' | 'alerting';
  endpoint: string;
  status: 'healthy' | 'warning' | 'critical' | 'unknown';
  health: number;
  uptime: number;
  responseTime: number;
  dataPointsCount: number;
  metricsProvided: string[];
  lastChecked: Date;
  consecutiveFailures: number;
  description: string;
}

interface ProviderStats {
  totalProviders: number;
  healthyProviders: number;
  warningProviders: number;
  criticalProviders: number;
  totalDataPoints: number;
  averageResponseTime: number;
  overallHealth: number;
}

export default function DataProviderRegistry() {
  const [providers, setProviders] = useState<DataProvider[]>([]);
  const [stats, setStats] = useState<ProviderStats>({
    totalProviders: 0,
    healthyProviders: 0,
    warningProviders: 0,
    criticalProviders: 0,
    totalDataPoints: 0,
    averageResponseTime: 0,
    overallHealth: 0
  });
  const [selectedCategory, setSelectedCategory] = useState<string>('all');
  const [expandedProvider, setExpandedProvider] = useState<string | null>(null);

  // Initialize monitoring providers
  const initializeProviders = (): DataProvider[] => [
    {
      id: 'prometheus',
      name: 'Prometheus',
      category: 'metrics',
      endpoint: 'http://34.41.115.199:9090',
      status: 'healthy',
      health: 99.8,
      uptime: 99.94,
      responseTime: 145,
      dataPointsCount: 40,
      metricsProvided: [
        'central_mcp_up',
        'central_mcp_uptime_seconds',
        'central_mcp_memory_heap_used_bytes',
        'central_mcp_projects_total',
        'central_mcp_active_agents_total',
        'central_mcp_tasks_total',
        'central_mcp_loop_execution_count',
        '...and 33 more metrics'
      ],
      lastChecked: new Date(),
      consecutiveFailures: 0,
      description: 'Time-series database collecting 40+ custom Central-MCP metrics with 15-second scrape interval'
    },
    {
      id: 'central-mcp-api',
      name: 'Central-MCP API',
      category: 'monitoring',
      endpoint: 'http://34.41.115.199:3000/api',
      status: 'healthy',
      health: 100,
      uptime: 100,
      responseTime: 85,
      dataPointsCount: 19,
      metricsProvided: [
        '/api/system/status',
        '/api/loops/stats',
        '/api/agents/sessions',
        '/api/projects/list',
        '/api/tasks/summary',
        '/api/health',
        '...and 13 more endpoints'
      ],
      lastChecked: new Date(),
      consecutiveFailures: 0,
      description: 'Primary API providing system status, loop stats, agent sessions, project data, and task metrics'
    },
    {
      id: 'node-exporter',
      name: 'Node Exporter',
      category: 'system',
      endpoint: 'http://34.41.115.199:9100',
      status: 'healthy',
      health: 99.9,
      uptime: 99.99,
      responseTime: 12,
      dataPointsCount: 150,
      metricsProvided: [
        'node_cpu_seconds_total',
        'node_memory_*',
        'node_filesystem_*',
        'node_network_*',
        'node_load*',
        'node_disk_*',
        '...and 144 more system metrics'
      ],
      lastChecked: new Date(),
      consecutiveFailures: 0,
      description: 'System metrics exporter providing CPU, memory, disk, network, and 150+ OS-level metrics'
    },
    {
      id: 'metrics-exporter',
      name: 'Metrics Exporter',
      category: 'metrics',
      endpoint: 'http://34.41.115.199:8001/metrics',
      status: 'healthy',
      health: 98.5,
      uptime: 99.7,
      responseTime: 95,
      dataPointsCount: 40,
      metricsProvided: [
        'System Metrics (5)',
        'Project Metrics (2)',
        'Agent Metrics (2)',
        'Task Metrics (6)',
        'Auto-Proactive Loop Metrics (27)',
        'Database Metrics (4)',
        'Scrape Metrics (2)'
      ],
      lastChecked: new Date(),
      consecutiveFailures: 0,
      description: 'Custom Prometheus metrics exporter for Central-MCP with 40+ application-specific metrics'
    },
    {
      id: 'grafana',
      name: 'Grafana',
      category: 'visualization',
      endpoint: 'http://34.41.115.199:3001',
      status: 'healthy',
      health: 99.5,
      uptime: 99.8,
      responseTime: 210,
      dataPointsCount: 0,
      metricsProvided: [
        'Dashboard Visualization',
        'Prometheus Data Source',
        'Custom Panels',
        'Alert Visualization',
        'Historical Analysis',
        'Query Interface'
      ],
      lastChecked: new Date(),
      consecutiveFailures: 0,
      description: 'Advanced visualization platform for creating custom dashboards and analyzing time-series data'
    },
    {
      id: 'alertmanager',
      name: 'AlertManager',
      category: 'alerting',
      endpoint: 'http://34.41.115.199:9093',
      status: 'healthy',
      health: 99.2,
      uptime: 99.6,
      responseTime: 75,
      dataPointsCount: 7,
      metricsProvided: [
        'CentralMCPDown',
        'AutoProactiveLoopDown',
        'HighMemoryUsage',
        'HighCPUUsage',
        'DiskSpaceRunningOut',
        'NoActiveAgents',
        'HighTaskFailureRate'
      ],
      lastChecked: new Date(),
      consecutiveFailures: 0,
      description: 'Automated alerting system with 7 pre-configured alert rules for system monitoring'
    }
  ];

  // Fetch provider data and check health
  const fetchProviderData = async () => {
    try {
      // In production, this would make actual health checks to each provider
      const updatedProviders = initializeProviders();

      // Simulate real-time health checks (in production, these would be actual API calls)
      for (const provider of updatedProviders) {
        provider.lastChecked = new Date();
        // Simulate slight variations in metrics
        provider.responseTime = provider.responseTime + Math.random() * 20 - 10;
        provider.health = Math.min(100, provider.health + Math.random() * 2 - 1);
      }

      setProviders(updatedProviders);

      // Calculate aggregate stats
      const totalDataPoints = updatedProviders.reduce((sum, p) => sum + p.dataPointsCount, 0);
      const avgResponseTime = updatedProviders.reduce((sum, p) => sum + p.responseTime, 0) / updatedProviders.length;
      const overallHealth = updatedProviders.reduce((sum, p) => sum + p.health, 0) / updatedProviders.length;

      setStats({
        totalProviders: updatedProviders.length,
        healthyProviders: updatedProviders.filter(p => p.status === 'healthy').length,
        warningProviders: updatedProviders.filter(p => p.status === 'warning').length,
        criticalProviders: updatedProviders.filter(p => p.status === 'critical').length,
        totalDataPoints,
        averageResponseTime: Math.round(avgResponseTime),
        overallHealth: Math.round(overallHealth * 10) / 10
      });
    } catch (error) {
      console.error('Error fetching provider data:', error);
    }
  };

  // Real-time updates every 5 seconds
  useEffect(() => {
    fetchProviderData();
    const interval = setInterval(fetchProviderData, 5000);
    return () => clearInterval(interval);
  }, []);

  const filteredProviders = selectedCategory === 'all'
    ? providers
    : providers.filter(p => p.category === selectedCategory);

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'healthy': return 'text-color-success';
      case 'warning': return 'text-color-warning';
      case 'critical': return 'text-color-error';
      default: return 'text-text-tertiary';
    }
  };

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case 'monitoring': return '📊';
      case 'metrics': return '📈';
      case 'system': return '🖥️';
      case 'visualization': return '📉';
      case 'alerting': return '🚨';
      default: return '🔌';
    }
  };

  return (
    <div className="space-y-2 p-2 md:p-3">
      {/* Ultra-Compact Header */}
      <div className="bg-scaffold-1 rounded-lg p-2 md:p-3 border border-border-subtle">
        <div className="flex items-center justify-between mb-2">
          <div>
            <h1 className="text-sm md:text-base font-bold">📡 Data Provider Registry</h1>
            <p className="text-xs text-text-secondary hidden md:block">
              All sources • Real-time
            </p>
          </div>
          <div className="text-right">
            <div className="text-lg md:text-2xl font-bold text-color-success">{stats.overallHealth}%</div>
            <div className="text-[10px] md:text-xs text-text-secondary">Health</div>
          </div>
        </div>

        {/* Ultra-Compact Stats Grid */}
        <div className="grid grid-cols-3 md:grid-cols-6 gap-1 md:gap-2">
          <StatCard
            label="Providers"
            value={stats.totalProviders.toString()}
            icon="🔌"
            color="info"
          />
          <StatCard
            label="Healthy"
            value={stats.healthyProviders.toString()}
            icon="✅"
            color="success"
          />
          <StatCard
            label="Data"
            value={stats.totalDataPoints.toString()}
            icon="📊"
            color="info"
            highlight
          />
          <StatCard
            label="Response"
            value={`${stats.averageResponseTime}ms`}
            icon="⚡"
            color="info"
          />
          <StatCard
            label="Uptime"
            value="99.8%"
            icon="🟢"
            color="success"
          />
          <StatCard
            label="Warning"
            value={stats.warningProviders.toString()}
            icon="⚠️"
            color="warning"
          />
        </div>
      </div>

      {/* Ultra-Compact Filters */}
      <div className="flex gap-1 overflow-x-auto pb-1 scrollbar-hide">
        {['all', 'monitoring', 'metrics', 'system', 'visualization', 'alerting'].map(category => (
          <button
            key={category}
            onClick={() => setSelectedCategory(category)}
            className={`px-2 py-1 text-[10px] md:text-xs rounded font-medium whitespace-nowrap transition-all ${
              selectedCategory === category
                ? 'bg-accent-primary text-white'
                : 'bg-scaffold-2 text-text-secondary hover:bg-scaffold-3'
            }`}
          >
            {category.charAt(0).toUpperCase() + category.slice(1)}
          </button>
        ))}
      </div>

      {/* Ultra-Compact Provider Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2">
        {filteredProviders.map(provider => (
          <div
            key={provider.id}
            className="bg-scaffold-1 rounded-lg border border-border-subtle hover:border-border-default transition-all overflow-hidden"
          >
            {/* Compact Header */}
            <div className="p-2 md:p-3">
              <div className="flex items-center justify-between mb-2">
                <div className="flex items-center gap-2">
                  <div className="text-lg md:text-xl">{getCategoryIcon(provider.category)}</div>
                  <div>
                    <h3 className="text-xs md:text-sm font-bold">{provider.name}</h3>
                    <p className="text-[10px] text-text-tertiary">{provider.category}</p>
                  </div>
                </div>
                <div className={`w-2 h-2 rounded-full ${
                  provider.status === 'healthy' ? 'bg-color-success animate-pulse' :
                  provider.status === 'warning' ? 'bg-color-warning' :
                  'bg-text-tertiary'
                }`} />
              </div>

              <p className="text-[10px] md:text-xs text-text-secondary mb-2 line-clamp-2">{provider.description}</p>

              {/* Compact Metrics */}
              <div className="grid grid-cols-2 gap-1 mb-2">
                <MetricBadge label="Health" value={`${provider.health.toFixed(0)}%`} />
                <MetricBadge label="Uptime" value={`${provider.uptime.toFixed(1)}%`} />
                <MetricBadge label="Response" value={`${Math.round(provider.responseTime)}ms`} />
                <MetricBadge label="Data" value={provider.dataPointsCount.toString()} highlight />
              </div>

              {/* Compact Endpoint */}
              <div className="bg-scaffold-2 rounded p-1 md:p-2 mb-2">
                <code className="text-[10px] md:text-xs text-color-info font-mono break-all">{provider.endpoint}</code>
              </div>

              {/* Compact Expand Button */}
              <button
                onClick={() => setExpandedProvider(expandedProvider === provider.id ? null : provider.id)}
                className="w-full py-1 px-2 rounded bg-scaffold-2 hover:bg-scaffold-3 text-[10px] md:text-xs font-medium transition-colors"
              >
                {expandedProvider === provider.id ? '▼ Hide' : '▶ Show'} ({provider.metricsProvided.length})
              </button>
            </div>

            {/* Compact Expanded List */}
            {expandedProvider === provider.id && (
              <div className="border-t border-border-subtle p-2 md:p-3 bg-scaffold-0 max-h-40 overflow-y-auto scrollbar-thin">
                <div className="space-y-1">
                  {provider.metricsProvided.map((metric, idx) => (
                    <div key={idx} className="flex items-center gap-1 text-[10px] md:text-xs bg-scaffold-1 rounded px-2 py-1">
                      <span className="text-color-success text-xs">✓</span>
                      <code className="text-text-secondary font-mono text-[10px]">{metric}</code>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        ))}
      </div>

      {/* Ultra-Compact Footer */}
      <div className="bg-gradient-to-r from-accent-primary/10 to-accent-secondary/10 rounded-lg p-2 md:p-3 border border-accent-primary/20">
        <div className="flex items-center justify-between mb-2">
          <div>
            <h3 className="text-xs md:text-sm font-bold">Total Registry</h3>
            <p className="text-[10px] text-text-secondary">
              {stats.totalProviders} providers
            </p>
          </div>
          <div className="text-right">
            <div className="text-2xl md:text-3xl font-bold text-accent-primary">
              {stats.totalDataPoints}
            </div>
            <div className="text-[10px] text-text-secondary">Data Points</div>
          </div>
        </div>

        <div className="grid grid-cols-4 gap-1 md:gap-2">
          <div className="text-center bg-scaffold-1 rounded p-1">
            <div className="text-sm md:text-lg font-bold text-color-success">
              {providers.find(p => p.id === 'node-exporter')?.dataPointsCount || 0}
            </div>
            <div className="text-[9px] md:text-[10px] text-text-tertiary">System</div>
          </div>
          <div className="text-center bg-scaffold-1 rounded p-1">
            <div className="text-sm md:text-lg font-bold text-color-info">
              {(providers.find(p => p.id === 'prometheus')?.dataPointsCount || 0) +
               (providers.find(p => p.id === 'metrics-exporter')?.dataPointsCount || 0)}
            </div>
            <div className="text-[9px] md:text-[10px] text-text-tertiary">App</div>
          </div>
          <div className="text-center bg-scaffold-1 rounded p-1">
            <div className="text-sm md:text-lg font-bold text-metric-network">
              {providers.find(p => p.id === 'central-mcp-api')?.dataPointsCount || 0}
            </div>
            <div className="text-[9px] md:text-[10px] text-text-tertiary">API</div>
          </div>
          <div className="text-center bg-scaffold-1 rounded p-1">
            <div className="text-sm md:text-lg font-bold text-color-warning">
              {providers.find(p => p.id === 'alertmanager')?.dataPointsCount || 0}
            </div>
            <div className="text-[9px] md:text-[10px] text-text-tertiary">Alerts</div>
          </div>
        </div>
      </div>
    </div>
  );
}

// Supporting Components

interface StatCardProps {
  label: string;
  value: string;
  icon: string;
  color: 'success' | 'warning' | 'error' | 'info';
  highlight?: boolean;
}

function StatCard({ label, value, icon, color, highlight }: StatCardProps) {
  const colorClasses = {
    success: 'text-color-success',
    warning: 'text-color-warning',
    error: 'text-color-error',
    info: 'text-color-info'
  };

  return (
    <div className={`bg-scaffold-2 rounded p-1 md:p-2 ${highlight ? 'ring-1 ring-accent-primary' : ''}`}>
      <div className="text-xs md:text-sm mb-0.5">{icon}</div>
      <div className={`text-sm md:text-lg font-bold ${colorClasses[color]}`}>{value}</div>
      <div className="text-[9px] md:text-[10px] text-text-tertiary truncate">{label}</div>
    </div>
  );
}

interface MetricBadgeProps {
  label: string;
  value: string;
  highlight?: boolean;
}

function MetricBadge({ label, value, highlight }: MetricBadgeProps) {
  return (
    <div className={`bg-scaffold-2 rounded px-1 md:px-2 py-0.5 md:py-1 ${highlight ? 'ring-1 ring-accent-primary' : ''}`}>
      <div className="text-[9px] md:text-[10px] text-text-tertiary">{label}</div>
      <div className="text-xs md:text-sm font-bold truncate">{value}</div>
    </div>
  );
}
