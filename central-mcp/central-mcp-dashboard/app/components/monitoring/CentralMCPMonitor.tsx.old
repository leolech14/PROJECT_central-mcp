'use client';

import { useState, useEffect } from 'react';
import { SystemHealthRing } from '../ui/SystemHealthRing';
import { RealtimeMetricsGrid } from '../ui/RealtimeMetricsGrid';
import { LoopStatusPanel } from '../ui/LoopStatusPanel';
import { AgentActivityPanel } from '../ui/AgentActivityPanel';
import { ProjectsOverview } from '../ui/ProjectsOverview';
import { TaskAnalytics } from '../ui/TaskAnalytics';
import { PrometheusMetrics } from '../ui/PrometheusMetrics';

type MonitorTab = 'overview' | 'loops' | 'agents' | 'projects' | 'tasks' | 'metrics' | 'system';

interface SystemStatus {
  health: number;
  uptime: number;
  memory: { used: number; total: number };
  cpu: number;
  disk: number;
}

interface LoopStats {
  name: string;
  status: 'active' | 'idle' | 'error';
  executionCount: number;
  avgDuration: number;
  lastRun: string;
}

interface AgentSession {
  agentLetter: string;
  model: string;
  status: 'ACTIVE' | 'IDLE';
  currentTask?: string;
  connectedAt: string;
}

interface ProjectSummary {
  total: number;
  byType: { [key: string]: number };
  healthPercent: number;
  blockers: number;
}

interface TaskMetrics {
  total: number;
  pending: number;
  inProgress: number;
  completed: number;
  blocked: number;
  completionRate: number;
  velocity: number;
}

export default function CentralMCPMonitor() {
  const [activeTab, setActiveTab] = useState<MonitorTab>('overview');
  const [currentTheme, setCurrentTheme] = useState<'light' | 'dark'>('dark');

  // Real-time data state
  const [systemStatus, setSystemStatus] = useState<SystemStatus>({
    health: 100,
    uptime: 0,
    memory: { used: 0, total: 1024 },
    cpu: 0,
    disk: 0
  });

  const [loopStats, setLoopStats] = useState<LoopStats[]>([]);
  const [agents, setAgents] = useState<AgentSession[]>([]);
  const [projects, setProjects] = useState<ProjectSummary>({
    total: 0,
    byType: {},
    healthPercent: 0,
    blockers: 0
  });
  const [tasks, setTasks] = useState<TaskMetrics>({
    total: 0,
    pending: 0,
    inProgress: 0,
    completed: 0,
    blocked: 0,
    completionRate: 0,
    velocity: 0
  });

  const [connectionCount, setConnectionCount] = useState(0);
  const [dataPoints, setDataPoints] = useState(0);
  const [lastUpdate, setLastUpdate] = useState<Date>(new Date());

  // Fetch all data sources in parallel
  const fetchAllData = async () => {
    try {
      const [statusRes, loopsRes, prometheusRes] = await Promise.all([
        fetch('/api/data/system'),
        fetch('/api/data/loops'),
        fetch('/api/data/prometheus')
      ]);

      const statusData = await statusRes.json();
      const loopsData = await loopsRes.json();
      const prometheusData = await prometheusRes.json();

      // Update all state
      setSystemStatus(statusData.system);
      setLoopStats(loopsData.loops);
      setAgents(statusData.agents);
      setProjects(statusData.projects);
      setTasks(statusData.tasks);

      // Calculate connection metrics
      setConnectionCount(
        1 + // Central-MCP API
        1 + // Prometheus
        1 + // Node Exporter
        loopsData.loops.length + // Each loop
        statusData.agents.length // Each agent
      );

      setDataPoints(
        statusData.projects.total +
        statusData.tasks.total +
        statusData.agents.length +
        loopsData.loops.length
      );

      setLastUpdate(new Date());
    } catch (error) {
      console.error('Error fetching dashboard data:', error);
    }
  };

  // Real-time updates every 2 seconds
  useEffect(() => {
    fetchAllData();
    const interval = setInterval(fetchAllData, 2000);
    return () => clearInterval(interval);
  }, []);

  // Theme toggle
  const toggleTheme = () => {
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
    setCurrentTheme(newTheme);
    document.documentElement.setAttribute('data-theme', newTheme);
  };

  return (
    <div className="min-h-screen bg-scaffold-0 text-text-primary">
      {/* Header */}
      <header className="sticky top-0 z-50 bg-scaffold-1 border-b border-border-subtle">
        <div className="max-w-[1920px] mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            {/* Logo and Title */}
            <div className="flex items-center gap-4">
              <div className="w-10 h-10 rounded-lg bg-gradient-to-br from-accent-primary to-accent-secondary flex items-center justify-center">
                <span className="text-2xl font-bold text-white">CM</span>
              </div>
              <div>
                <h1 className="text-xl font-bold">Central-MCP Monitor</h1>
                <p className="text-sm text-text-secondary">
                  {connectionCount} connections ‚Ä¢ {dataPoints} data points ‚Ä¢ Updated {lastUpdate.toLocaleTimeString()}
                </p>
              </div>
            </div>

            {/* System Health Ring */}
            <SystemHealthRing health={systemStatus.health} size="small" />

            {/* Theme Toggle */}
            <button
              onClick={toggleTheme}
              className="px-4 py-2 rounded-lg bg-scaffold-2 hover:bg-scaffold-3 transition-colors"
            >
              {currentTheme === 'dark' ? '‚òÄÔ∏è' : 'üåô'}
            </button>
          </div>

          {/* Tab Navigation */}
          <nav className="flex gap-2 mt-4 overflow-x-auto">
            {(['overview', 'loops', 'agents', 'projects', 'tasks', 'metrics', 'system'] as MonitorTab[]).map(tab => (
              <button
                key={tab}
                onClick={() => setActiveTab(tab)}
                className={`px-4 py-2 rounded-lg font-medium transition-all ${
                  activeTab === tab
                    ? 'bg-accent-primary text-white'
                    : 'bg-scaffold-2 text-text-secondary hover:bg-scaffold-3 hover:text-text-primary'
                }`}
              >
                {tab.charAt(0).toUpperCase() + tab.slice(1)}
              </button>
            ))}
          </nav>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-[1920px] mx-auto px-6 py-8">
        {activeTab === 'overview' && (
          <div className="space-y-6">
            {/* Top Metrics Grid */}
            <RealtimeMetricsGrid
              systemStatus={systemStatus}
              projects={projects}
              agents={agents}
              tasks={tasks}
            />

            {/* Loops Overview */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <LoopStatusPanel loops={loopStats.slice(0, 5)} title="Core Loops (0-4)" />
              <LoopStatusPanel loops={loopStats.slice(5)} title="Intelligence Loops (5-9)" />
            </div>

            {/* Bottom Panels */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <AgentActivityPanel agents={agents} />
              <TaskAnalytics tasks={tasks} />
            </div>
          </div>
        )}

        {activeTab === 'loops' && (
          <div className="space-y-6">
            <LoopStatusPanel loops={loopStats} title="All Auto-Proactive Loops" expanded />
          </div>
        )}

        {activeTab === 'agents' && (
          <div className="space-y-6">
            <AgentActivityPanel agents={agents} expanded />
          </div>
        )}

        {activeTab === 'projects' && (
          <div className="space-y-6">
            <ProjectsOverview projects={projects} />
          </div>
        )}

        {activeTab === 'tasks' && (
          <div className="space-y-6">
            <TaskAnalytics tasks={tasks} expanded />
          </div>
        )}

        {activeTab === 'metrics' && (
          <div className="space-y-6">
            <PrometheusMetrics />
          </div>
        )}

        {activeTab === 'system' && (
          <div className="space-y-6">
            <div className="bg-scaffold-1 rounded-xl p-6 border border-border-subtle">
              <h2 className="text-2xl font-bold mb-6">System Resources</h2>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div>
                  <div className="text-sm text-text-secondary mb-2">CPU Usage</div>
                  <div className="text-3xl font-bold text-metric-cpu">{systemStatus.cpu.toFixed(1)}%</div>
                  <div className="mt-2 h-2 bg-scaffold-2 rounded-full overflow-hidden">
                    <div
                      className="h-full bg-metric-cpu transition-all duration-500"
                      style={{ width: `${systemStatus.cpu}%` }}
                    />
                  </div>
                </div>
                <div>
                  <div className="text-sm text-text-secondary mb-2">Memory</div>
                  <div className="text-3xl font-bold text-metric-memory">
                    {systemStatus.memory.used}MB / {systemStatus.memory.total}MB
                  </div>
                  <div className="mt-2 h-2 bg-scaffold-2 rounded-full overflow-hidden">
                    <div
                      className="h-full bg-metric-memory transition-all duration-500"
                      style={{ width: `${(systemStatus.memory.used / systemStatus.memory.total) * 100}%` }}
                    />
                  </div>
                </div>
                <div>
                  <div className="text-sm text-text-secondary mb-2">Disk Usage</div>
                  <div className="text-3xl font-bold text-metric-disk">{systemStatus.disk.toFixed(1)}%</div>
                  <div className="mt-2 h-2 bg-scaffold-2 rounded-full overflow-hidden">
                    <div
                      className="h-full bg-metric-disk transition-all duration-500"
                      style={{ width: `${systemStatus.disk}%` }}
                    />
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
      </main>
    </div>
  );
}
